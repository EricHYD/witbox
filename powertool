#!/usr/bin/python

import os,sys,re
import platform
from optparse import OptionParser
from xml.etree import ElementTree
from datetime import date

sys.path.append('configs')

curr_user = ''
conf_list = {}

def get_user_info():
	fd = open('/etc/passwd', 'r')

	for line in fd:
		account = line.split(':')
		user_name = account[0]
		if user_name == curr_user:
			full_name = account[4].split(',')[0]
			break

	fd.close()

	return full_name

def do_install(curr_distrib, curr_version, curr_arch, install_list):
	upgrade  = ''
	install  = ''
	tree = ElementTree.parse(r'app/apps.xml')
	root = tree.getroot()
	dist_list = root.getchildren()
	for dist_node in dist_list:
		if dist_node.attrib['name'] == curr_distrib:
			upgrade = dist_node.attrib['upgrade']
			install = dist_node.attrib['install']

			#if upgrade <> '':
			#	os.system('sudo ' + upgrade)

			os.system('sudo ' + install + ' ' + install_list)
			break
		#release_list = dist_node.getchildren()
		#for release in release_list:
		#	version = release.attrib['version']
		#	if version == 'all' or version == curr_version:
		#		app_list = release.getchildren()
		#		for pkg in install_list:
		#			for app_node in app_list:
		#				attr_class = app_node.get('class')
		#				attr_arch = app_node.get('arch', curr_arch)

		#				if attr_arch == curr_arch and attr_class == pkg:
		#					print 'Installing %s:\n  %s' % (attr_class, app_node.text)
		#					os.system('sudo ' + install + ' ' +  app_node.text)
	
		#					attr_post = app_node.get('post')
		#					if attr_post <> None:
		#						os.system('cd app/%s && ./%s' % (attr_class, attr_post))
		#					print ''

		#		if version == curr_version:
		#			break

def parse_config():
	fd = open('.config')
	for line in fd:
		if re.match(r'^[a-zA-Z].*=.*', line) <> None:
			elem = re.split('\s*=\s*', line.replace('\n', ''))
			conf_list[elem[0]] = elem[1]
	fd.close()

def config(cfg):
	name = get_user_info()

	if cfg == 'entrance':
		mail = '12345678@qq.com'
		mailto = 'success@maxwit.com'
	else:
		mail = name.lower().replace(' ', '.') + '@maxwit.com'
		now = date.today()
		mailto = 'csg%d%d@maxwit.com' % (now.year % 100, (now.month + 1) / 2)

	fd = open('.config', 'w+')
	fd.write('config = %s\n' % cfg)
	fd.write('user.name = %s\n' % name)
	fd.write('user.mail = %s\n' % mail)
	fd.write('mailto = %s\n' % mailto)
	fd.close()

def setup():
	if conf_list['config'] == 'entrance':
		from ent import do_setup, do_report
	else:
		from onb import do_setup, do_report

	apps = None

	fd = open('configs/%s/setup' % conf_list['config'])
	for line in fd:
		if re.match(r'^\s*[a-zA-Z].*=.*', line) <> None:
			elem = re.split('\s*=\s*', line[:-1])
			#elem = line[:-1].split('=')
			if elem[0].strip() == 'apps':
				apps = elem[1]
	fd.close()

	distrib = platform.dist()[0].lower()
	version = platform.dist()[2].lower()
	arch = platform.processor()

	if apps <> None:
		do_install(distrib, version, arch, apps);

	do_setup(distrib, version, conf_list)

	rep_fn = '/tmp/report'

	rep_fd = open(rep_fn, 'w+')
	rep_fd.write('from: "%s" <%s>\n' % (conf_list['user.name'], conf_list['user.mail']))
	rep_fd.write('to: "%s\n' % conf_list['mailto'])
	#if conf_list.has_key('mailcc'):
	#	rep_fd.write('cc: "%s\n' % conf_list['mailcc'])
	rep_fd.write('subject: [report] init\n\n')
	rep_fd.write('OS: %s, %s\n' % (platform.dist(), arch))
	rep_fd.close()

	os.system("msmtp %s < %s" % (conf_list['mailto'],  rep_fn))

def report(rep):
	rep_fn = '/tmp/report'

	rep_fd = open(rep_fn, 'w+')
	rep_fd.write('from: "%s" <%s>\n' % (conf_list['user.name'], conf_list['user.mail']))
	rep_fd.write('subject: [report] %s\n' % (rep))
	rep_fd.write('\n')
	rep_fd.close()

	sys.path.append('configs')
	if conf_list['config'] == 'entrance':
		from ent import do_setup, do_report
	else:
		from onb import do_setup, do_report

	do_report(rep, rep_fn, conf_list)
	#print "msmtp %s < %s" % (conf_list['mailto'],  rep_fn)
	os.system("msmtp %s < %s" % (conf_list['mailto'],  rep_fn))
	os.system("mutt -s [report]%s %s -c %s < %s" % (rep, conf_list['mailto'], conf_list['mailcc'], rep_fn))

def main():
	parser = OptionParser()
	parser.add_option('-c', '--config', dest='config',
					  default=False, action='store_true',
					  help="PowerTool configuration")
	parser.add_option('-r', '--report', dest='report',
					  default=False, action='store_true',
					  help="task report")
	parser.add_option('-v', '--version', dest='version',
					  default=False, action='store_true',
					  help="show PowerTool version and exit")

	(options, args) = parser.parse_args()

	if options.version:
		print "  MaxWit PowerTool %s (by MaxWit Software, http://www.maxwit.com)" % "v3.3"
		exit()

	if options.config:
		if len(args) <> 1:
			print 'Usage: ./powertool -c <help|arg>'
			exit()

		dl = os.listdir('./configs')
		for cfg in dl:
			if cfg == args[0]:
				config(cfg)
				try:
					config(cfg)
					print 'Finished.'
				except:
					print 'Fail to configure!'
				finally:
					exit()

		print "configs currently supported:"
		for dir in dl:
			print '  ' + dir

		exit()

	parse_config()

	if len(args) == 0:
		try:
			setup()
		except:
			print 'fail to setup system'
			exit()

	if options.report:
		if len(args) <> 1:
			print 'Usage: ./powertool -r <...>'
			exit()

		try:
			report(args[0])
		finally:
			exit()

	if len(args) > 0:
		parser.print_help()
		exit()

if __name__ == "__main__":
	curr_user = os.getenv('USER')
	if curr_user == 'root':
		print 'cannot run as root!'
		exit()

	main()
