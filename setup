#!/usr/bin/python

import os,sys,re
import shutil
import platform
from optparse import OptionParser
from xml.etree import ElementTree
from datetime import date

curr_user = ''
conf_list = {}

# fixme!
def setup_msmtp(distrib, version, config):
	user = config['user']
	email = config['email']
	epass = config['epass']
	domain = email.split('@')[1]
	# host = 'smtp.' + domain

	print 'setup msmtp ...'
	fd_rept = open(os.getenv('HOME') + '/.msmtprc', 'w+')
#defaults
#
#account qq
#host smtp.qq.com
#user 1450028115@qq.com
#from 1450028115@qq.com
#password ???
#auth login
#
#account default: qq
	fd_rept.write('defaults\n\n')
	fd_rept.write('account %s\n' % domain)
	fd_rept.write('host smtp.%s\n' % domain)
	fd_rept.write('user %s\n' % email)
	fd_rept.write('from %s\n' % email)
	fd_rept.write('password %s\n' % epass)
	fd_rept.write('auth login\n\n')
	fd_rept.write('account default: %s' % domain)
	fd_rept.close()

	os.chmod(os.getenv('HOME') + '/.msmtprc', 0600)

do_setup = {"msmtp": setup_msmtp}

def traverse(node, path):
	if not os.path.exists(path):
		print "creating \"%s\"" % path
		os.mkdir(path)
	#else:
	#	print "skipping \"%s\"" % path
	lst = node.getchildren()
	for n in lst:
		traverse(n, path + '/' + n.attrib['name'])

# population the target directory
def populate_tree(fn):
	tree = ElementTree.parse(fn)
	root = tree.getroot()

	top = '/' + root.attrib['name']

	mounted = False
	fd_chk = open('/proc/mounts')
	for line in fd_chk:
		mount = line.split(' ')
		if mount[1] == top:
			mounted = True
			break
	fd_chk.close()

	if mounted == False:
		print '"%s" NOT mounted!' % top
		exit()

	if not os.access(top, 7):
		print 'Fail to access "' + top + '", permission denied!'
		exit()
		#os.system('sudo chown $USER ' + top) # fixme!

	traverse(root, top)

def get_user_info():
	fd_rept = open('/etc/passwd', 'r')

	for line in fd_rept:
		account = line.split(':')
		user_name = account[0]
		if user_name == curr_user:
			full_name = account[4].split(',')[0]
			break

	fd_rept.close()

	return full_name

def do_install(curr_distrib, curr_version, curr_arch, install_list):
	upgrade  = ''
	install  = ''
	tree = ElementTree.parse(r'app/apps.xml')
	root = tree.getroot()
	dist_list = root.getchildren()

	for dist_node in dist_list:
		if dist_node.attrib['name'] == curr_distrib:
			upgrade = dist_node.attrib['upgrade']
			install = dist_node.attrib['install']

			if upgrade != '':
				os.system('sudo ' + upgrade)
				print

			release_list = dist_node.getchildren()
			for release in release_list:
				version = release.attrib['version']
				if version == 'all' or version == curr_version:
					for pkg in install_list:
						for app_node in release.getchildren():
							if curr_arch != app_node.get('arch', curr_arch):
								continue

							if install_list[0] == 'ALL' or pkg in re.split('\s+', app_node.text):
								attr_group = app_node.get('group')
								#attr_post = app_node.get('post')

								print 'Installing %s:\n  %s' % (attr_group.upper(), app_node.text)
								os.system('sudo ' + install + ' ' +  app_node.text)

								#if attr_post != None:
								#	os.system('cd app/%s && ./%s' % (attr_group, attr_post))
								if do_setup.has_key(attr_group):
									do_setup[attr_group](curr_distrib, curr_version, conf_list)

								print

					if version == curr_version:
						return

def config():
	conf_list['user'] = get_user_info()
	conf_list['apps'] = 'msmtp'

def setup():
	distrib = platform.dist()[0].lower()
	version = platform.dist()[1].lower()
	arch = platform.processor()
	apps = re.split('\s+', conf_list['apps'])

	do_install(distrib, version, arch, apps);

def main():
	parser = OptionParser()
	parser.add_option('-m', '--email', dest='email',
					  help="E-mail Account")
	parser.add_option('-p', '--epass', dest='epass',
					  help="E-mail Password")
	parser.add_option('-v', '--version', dest='version',
					  default=False, action='store_true',
					  help="show PowerTool version and exit")

	(opts, args) = parser.parse_args()

	if opts.version:
		print "  MaxWit PowerTool %s (by MaxWit Software, http://www.maxwit.com)" % "v3.4-beta"
		exit()

	if opts.email != None:
		conf_list['email'] = opts.email

	if opts.epass != None:
		conf_list['epass'] = opts.epass

	config()

	setup()

	populate_tree('tree/tree.xml')

	exit()

if __name__ == "__main__":
	curr_user = os.getenv('USER')
	if curr_user == 'root':
		print 'cannot run as root!'
		exit()

	main()
